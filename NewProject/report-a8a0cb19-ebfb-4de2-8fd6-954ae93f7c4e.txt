I Summary
=========

This document reports on the results of an automatic security scan.
The report first summarises the results found.
Then, for each host, the report describes every issue found.
Please consider the advice given in each description, in order to rectify
the issue.

All dates are displayed using the timezone "America/Sao_Paulo",
which is abbreviated "-03".

Vendor security updates are not trusted.

Overrides are off.  Even when a result has an override, this report uses
the actual threat of the result.

Notes are included in the report.Information on overrides is included in the report.

This report might not show details of all issues that were found.
Issues with the threat level "Log" are not shown.
Issues with the threat level "Debug" are not shown.
Issues with the threat level "False Positive" are not shown.
Only results with a minimum QoD of 70 are shown.

This report contains all 8 results selected by the
filtering described above.  Before filtering there were 86 results.

Scan started: Tue Jul 26 14:18:42 2022 -03
Scan ended:   Tue Jul 26 14:33:01 2022 -03
Task:         Immediate scan of IP 10.0.0.12

Host Summary
************

Host            High  Medium  Low  Log  False Positive
10.0.0.12          0       6    2    0               0
Total: 1           0       6    2    0               0


II Results per Host
===================

Host 10.0.0.12
**************

Scanning of this host started at: Tue Jul 26 14:19:08 2022 -03
Number of results: 8

Port Summary for Host 10.0.0.12
-------------------------------

Service (Port)          Threat Level
22/tcp                  Medium
general/tcp             Low
21/tcp                  Medium
80/tcp                  Medium

Security Issues for Host 10.0.0.12
----------------------------------

Issue
-----
NVT:    Anonymous FTP Login Reporting
OID:    1.3.6.1.4.1.25623.1.0.900600
Threat: Medium (CVSS: 6.4)
Port:   21/tcp

Summary:
Reports if the remote FTP Server allows anonymous logins.

Vulnerability Detection Result:
It was possible to login to the remote FTP service with the following anonymous !
account(s):
anonymous:anonymous@example.com
ftp:anonymous@example.com

Impact:
Based on the files accessible via this anonymous FTP login and
  the permissions of this account an attacker might be able to:
  - gain access to sensitive files
  - upload or delete files.

Solution:
Solution type: Mitigation
If you do not want to share files, you should disable anonymous
  logins.

Vulnerability Insight:
A host that provides an FTP service may additionally provide
  Anonymous FTP access as well. Under this arrangement, users do not strictly ne!
ed an account on the
  host. Instead the user typically enters 'anonymous' or 'ftp' when prompted for!
 username. Although
  users are commonly asked to send their email address as their password, little!
 to no verification
  is actually performed on the supplied data.
  Remark: NIST don't see 'configuration issues' as software flaws so the referen!
ced CVE has a
  severity of 0.0. The severity of this VT has been raised by Greenbone to still!
 report a
  configuration issue on the target.

Vulnerability Detection Method:
Details:
Anonymous FTP Login Reporting
(OID: 1.3.6.1.4.1.25623.1.0.900600)
Version used: 2021-10-20T09:03:29Z

References:
 cve: CVE-1999-0497


Issue
-----
NVT:    Weak Key Exchange (KEX) Algorithm(s) Supported (SSH)
OID:    1.3.6.1.4.1.25623.1.0.150713
Threat: Medium (CVSS: 5.3)
Port:   22/tcp

Summary:
The remote SSH server is configured to allow / support weak key
  exchange (KEX) algorithm(s).

Vulnerability Detection Result:
The remote SSH server supports the following weak KEX algorithm(s):
KEX algorithm                      | Reason
--------------------------------------------------------------------------------!
-----------
diffie-hellman-group-exchange-sha1 | Using SHA-1
diffie-hellman-group1-sha1         | Using Oakley Group 2 (a 1024-bit MODP group!
) and SHA-1

Impact:
An attacker can quickly break individual connections.

Solution:
Solution type: Mitigation
Disable the reported weak KEX algorithm(s)
  - 1024-bit MODP group / prime KEX algorithms:
  Alternatively use elliptic-curve Diffie-Hellmann in general, e.g. Curve 25519.

Vulnerability Insight:
- 1024-bit MODP group / prime KEX algorithms:
  Millions of HTTPS, SSH, and VPN servers all use the same prime numbers for Dif!
fie-Hellman key
  exchange. Practitioners believed this was safe as long as new key exchange mes!
sages were generated
  for every connection. However, the first step in the number field sieve-the mo!
st efficient
  algorithm for breaking a Diffie-Hellman connection-is dependent only on this p!
rime.
  A nation-state can break a 1024-bit prime.

Vulnerability Detection Method:
Checks the supported KEX algorithms of the remote SSH server.
  Currently weak KEX algorithms are defined as the following:
  - non-elliptic-curve Diffie-Hellmann (DH) KEX algorithms with 1024-bit MODP gr!
oup / prime
  - ephemerally generated key exchange groups uses SHA-1
  - using RSA 1024-bit modulus key
Details:
Weak Key Exchange (KEX) Algorithm(s) Supported (SSH)
(OID: 1.3.6.1.4.1.25623.1.0.150713)
Version used: 2021-11-24T06:31:19Z

References:
 url: https://weakdh.org/sysadmin.html
 url: https://tools.ietf.org/id/draft-ietf-curdle-ssh-kex-sha2-09.html
 url: https://tools.ietf.org/id/draft-ietf-curdle-ssh-kex-sha2-09.html#rfc.section.5
 url: https://datatracker.ietf.org/doc/html/rfc6194


Issue
-----
NVT:    Weak Host Key Algorithm(s) (SSH)
OID:    1.3.6.1.4.1.25623.1.0.117687
Threat: Medium (CVSS: 5.3)
Port:   22/tcp

Summary:
The remote SSH server is configured to allow / support weak host
  key algorithm(s).

Vulnerability Detection Result:
The remote SSH server supports the following weak host key algorithm(s):
host key algorithm | Description
--------------------------------------------------------------------------------!
---------
ssh-dss            | Digital Signature Algorithm (DSA) / Digital Signature Stand!
ard (DSS)

Solution:
Solution type: Mitigation
Disable the reported weak host key algorithm(s).

Vulnerability Detection Method:
Checks the supported host key algorithms of the remote SSH
  server.
  Currently weak host key algorithms are defined as the following:
  - ssh-dss: Digital Signature Algorithm (DSA) / Digital Signature Standard (DSS!
)
Details:
Weak Host Key Algorithm(s) (SSH)
(OID: 1.3.6.1.4.1.25623.1.0.117687)
Version used: 2021-11-24T06:31:19Z


Issue
-----
NVT:    Cleartext Transmission of Sensitive Information via HTTP
OID:    1.3.6.1.4.1.25623.1.0.108440
Threat: Medium (CVSS: 4.8)
Port:   80/tcp

Summary:
The host / application transmits sensitive information (username, passwords) in
  cleartext via HTTP.

Vulnerability Detection Result:
The following input fields where identified (URL:input name):
http://10.0.0.12/:form-password

Impact:
An attacker could use this situation to compromise or eavesdrop on the
  HTTP communication between the client and the server using a man-in-the-middle!
 attack to get access to
  sensitive data like usernames or passwords.

Solution:
Solution type: Workaround
Enforce the transmission of sensitive data via an encrypted SSL/TLS connection.
  Additionally make sure the host / application is redirecting all users to the !
secured SSL/TLS connection before
  allowing to input sensitive data into the mentioned functions.

Affected Software/OS:
Hosts / applications which doesn't enforce the transmission of sensitive data vi!
a an
  encrypted SSL/TLS connection.

Vulnerability Detection Method:
Evaluate previous collected information and check if the host / application is n!
ot
  enforcing the transmission of sensitive data via an encrypted SSL/TLS connecti!
on.
  The script is currently checking the following:
  - HTTP Basic Authentication (Basic Auth)
  - HTTP Forms (e.g. Login) with input field of type 'password'
Details:
Cleartext Transmission of Sensitive Information via HTTP
(OID: 1.3.6.1.4.1.25623.1.0.108440)
Version used: 2020-08-24T15:18:35Z

References:
 url: https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management
 url: https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure
 url: https://cwe.mitre.org/data/definitions/319.html


Issue
-----
NVT:    FTP Unencrypted Cleartext Login
OID:    1.3.6.1.4.1.25623.1.0.108528
Threat: Medium (CVSS: 4.8)
Port:   21/tcp

Summary:
The remote host is running a FTP service that allows cleartext logins over
  unencrypted connections.

Vulnerability Detection Result:
The remote FTP service accepts logins without a previous sent 'AUTH TLS' command!
. Response(s):
Anonymous sessions:     331 Please specify the password.

Impact:
An attacker can uncover login names and passwords by sniffing traffic to the
  FTP service.

Solution:
Solution type: Mitigation
Enable FTPS or enforce the connection via the 'AUTH TLS' command. Please see
  the manual of the FTP service for more information.

Vulnerability Detection Method:
Tries to login to a non FTPS enabled FTP service without sending a
  'AUTH TLS' command first and checks if the service is accepting the login with!
out enforcing the use of
  the 'AUTH TLS' command.
Details:
FTP Unencrypted Cleartext Login
(OID: 1.3.6.1.4.1.25623.1.0.108528)
Version used: 2020-08-24T08:40:10Z


Issue
-----
NVT:    Weak Encryption Algorithm(s) Supported (SSH)
OID:    1.3.6.1.4.1.25623.1.0.105611
Threat: Medium (CVSS: 4.3)
Port:   22/tcp

Summary:
The remote SSH server is configured to allow / support weak
  encryption algorithm(s).

Vulnerability Detection Result:
The remote SSH server supports the following weak client-to-server encryption al!
gorithm(s):
3des-cbc
aes128-cbc
aes192-cbc
aes256-cbc
arcfour
arcfour128
arcfour256
blowfish-cbc
cast128-cbc
rijndael-cbc@lysator.liu.se
The remote SSH server supports the following weak server-to-client encryption al!
gorithm(s):
3des-cbc
aes128-cbc
aes192-cbc
aes256-cbc
arcfour
arcfour128
arcfour256
blowfish-cbc
cast128-cbc
rijndael-cbc@lysator.liu.se

Solution:
Solution type: Mitigation
Disable the reported weak encryption algorithm(s).

Vulnerability Insight:
- The 'arcfour' cipher is the Arcfour stream cipher with 128-bit
  keys. The Arcfour cipher is believed to be compatible with the RC4 cipher [SCH!
NEIER]. Arcfour
  (and RC4) has problems with weak keys, and should not be used anymore.
  - The 'none' algorithm specifies that no encryption is to be done. Note that t!
his method provides
  no confidentiality protection, and it is NOT RECOMMENDED to use it.
  - A vulnerability exists in SSH messages that employ CBC mode that may allow a!
n attacker to
  recover plaintext from a block of ciphertext.

Vulnerability Detection Method:
Checks the supported encryption algorithms (client-to-server
  and server-to-client) of the remote SSH server.
  Currently weak encryption algorithms are defined as the following:
  - Arcfour (RC4) cipher based algorithms
  - none algorithm
  - CBC mode cipher based algorithms
Details:
Weak Encryption Algorithm(s) Supported (SSH)
(OID: 1.3.6.1.4.1.25623.1.0.105611)
Version used: 2021-09-20T08:25:27Z

References:
 url: https://tools.ietf.org/html/rfc4253#section-6.3
 url: https://www.kb.cert.org/vuls/id/958563


Issue
-----
NVT:    Weak MAC Algorithm(s) Supported (SSH)
OID:    1.3.6.1.4.1.25623.1.0.105610
Threat: Low (CVSS: 2.6)
Port:   22/tcp

Summary:
The remote SSH server is configured to allow / support weak MAC
  algorithm(s).

Vulnerability Detection Result:
The remote SSH server supports the following weak client-to-server MAC algorithm!
(s):
hmac-md5
hmac-md5-96
hmac-md5-96-etm@openssh.com
hmac-md5-etm@openssh.com
hmac-sha1-96
hmac-sha1-96-etm@openssh.com
The remote SSH server supports the following weak server-to-client MAC algorithm!
(s):
hmac-md5
hmac-md5-96
hmac-md5-96-etm@openssh.com
hmac-md5-etm@openssh.com
hmac-sha1-96
hmac-sha1-96-etm@openssh.com

Solution:
Solution type: Mitigation
Disable the reported weak MAC algorithm(s).

Vulnerability Detection Method:
Checks the supported MAC algorithms (client-to-server and
  server-to-client) of the remote SSH server.
  Currently weak MAC algorithms are defined as the following:
  - MD5 based algorithms
  - 96-bit based algorithms
  - none algorithm
Details:
Weak MAC Algorithm(s) Supported (SSH)
(OID: 1.3.6.1.4.1.25623.1.0.105610)
Version used: 2021-09-20T11:05:40Z


Issue
-----
NVT:    TCP timestamps
OID:    1.3.6.1.4.1.25623.1.0.80091
Threat: Low (CVSS: 2.6)
Port:   general/tcp

Summary:
The remote host implements TCP timestamps and therefore allows to compute
  the uptime.

Vulnerability Detection Result:
It was detected that the host implements RFC1323/RFC7323.
The following timestamps were retrieved with a delay of 1 seconds in-between:
Packet 1: 1156458500
Packet 2: 1156458774

Impact:
A side effect of this feature is that the uptime of the remote
  host can sometimes be computed.

Solution:
Solution type: Mitigation
To disable TCP timestamps on linux add the line 'net.ipv4.tcp_timestamps = 0' to
  /etc/sysctl.conf. Execute 'sysctl -p' to apply the settings at runtime.
  To disable TCP timestamps on Windows execute 'netsh int tcp set global timesta!
mps=disabled'
  Starting with Windows Server 2008 and Vista, the timestamp can not be complete!
ly disabled.
  The default behavior of the TCP/IP stack on this Systems is to not use the
  Timestamp options when initiating TCP connections, but use them if the TCP pee!
r
  that is initiating communication includes them in their synchronize (SYN) segm!
ent.
  See the references for more information.

Affected Software/OS:
TCP implementations that implement RFC1323/RFC7323.

Vulnerability Insight:
The remote host implements TCP timestamps, as defined by RFC1323/RFC7323.

Vulnerability Detection Method:
Special IP packets are forged and sent with a little delay in between to the
  target IP. The responses are searched for a timestamps. If found, the timestam!
ps are reported.
Details:
TCP timestamps
(OID: 1.3.6.1.4.1.25623.1.0.80091)
Version used: 2020-08-24T08:40:10Z

References:
 url: http://www.ietf.org/rfc/rfc1323.txt
 url: http://www.ietf.org/rfc/rfc7323.txt
 url: https://web.archive.org/web/20151213072445/http://www.microsoft.com/en-us/download/details.aspx?id=9152


